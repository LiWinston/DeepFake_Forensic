name: deepfake_forensic

services:
  mysql:
    container_name: forensic_mysql
    image: mysql:8
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: lyc980820
      MYSQL_DATABASE: forensic_db
      MYSQL_ROOT_HOST: '%'
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/conf:/etc/mysql/conf.d
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-plyc980820"]
      timeout: 5s
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - forensic-network

  redis:
    container_name: forensic_redis
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - forensic-network

  kafka:
    container_name: forensic_kafka
    image: apache/kafka:3.9.1
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://kafka:19092'
      KAFKA_LISTENERS: 'PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT://0.0.0.0:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      KAFKA_CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - forensic-network

  minio:
    container_name: forensic_minio
    image: minio/minio:latest
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - forensic-network

  # Kafka Topic initialization container
  kafka-init:
    container_name: forensic_kafka_init
    image: apache/kafka:3.9.1
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        sleep 10
        echo 'Creating Kafka topics...'
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic metadata-analysis --bootstrap-server kafka:19092 --partitions 3 --replication-factor 1
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --topic file-processing --bootstrap-server kafka:19092 --partitions 3 --replication-factor 1
        echo 'Topics created successfully!'
        /opt/kafka/bin/kafka-topics.sh --list --bootstrap-server kafka:19092
        echo 'Kafka initialization completed!'
      "
    networks:
      - forensic-network

  # MinIO bucket initialization container
  minio-init:
    container_name: forensic_minio_init
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
        echo 'Configuring MinIO...'
        sleep 5
        /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin
        /usr/bin/mc mb myminio/forensic-media --ignore-existing
        /usr/bin/mc anonymous set public myminio/forensic-media
        echo 'MinIO configuration completed!'
      "
    networks:
      - forensic-network

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  minio-data:
    driver: local

networks:
  forensic-network:
    driver: bridge
